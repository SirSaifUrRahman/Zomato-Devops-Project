pipeline {
    agent {
        label 'habib-node'
    }


    tools {
        maven 'Maven3'
        jdk 'Java17'
        nodejs 'node23'
    }


    environment {
        //tools environments
        SONAR_HOME = tool "Sonar"
        //github environments
        GIT_REPO = 'https://github.com/SirSaifUrRahman/Zomato-Devops-Project'
        //dockerhub environments
        DOCKER_USER = "saif764"
        DOCKERHUB_LABEL = "dockerhub-cred"
        //jenkins environments
        JENKINS_API_TOKEN = credentials("JENKINS_API_TOKEN")
        BUILD_NUM_OF_CI = "${env.BUILD_NUMBER}"
    }

     parameters {
        string(name: 'BRANCH_NAME', defaultValue: 'master', description: 'Git branch to build')
        //booleanParam(name: 'RUN_TESTS', defaultValue: true, description: 'Run tests after building the project')
    }


    stages {
        stage ("Clean Workspace") {
            steps {
                cleanWs()
            }
        }
        stage ("Git Checkout") {
            steps {

                echo "Cloning ${GIT_REPO} branch: ${params.BRANCH_NAME}"
                git branch: "${params.BRANCH_NAME}", url: "${GIT_REPO}", credentialsId: 'github'
                sh "echo Printing Build Number of CI Job"
                sh "echo Build Number of CI Job is: ${BUILD_NUM_OF_CI}"
            }
        }
        stage("Sonarqube Analysis"){
            steps{
                withSonarQubeEnv(credentialsId: 'sonar-token') {
                    sh '''
                        $SONAR_HOME/bin/sonar-scanner \
                            -Dsonar.projectKey=zomato \
                            -Dsonar.projectName=zomato \
                            -Dsonar.projectVersion=1.0
                    '''
                }        
            }
        }
        stage("Code Quality Gate"){
           steps {
                script {
                    waitForQualityGate abortPipeline: false, credentialsId: 'sonar-token' 
                }
            } 
        }
        stage("Install NPM Dependencies") {
            steps {
                sh "npm install"
            }
        }
        // stage('OWASP FS SCAN') {
        //     steps {
        //         dependencyCheck additionalArguments: '--scan ./ --disableYarnAudit --disableNodeAudit -n', odcInstallation: 'DP-Check'
        //         dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
        //     }
        // }
        stage ("Trivy File Scan") {
            steps {
                sh "trivy fs . > trivy.txt"
            }
        }
        stage ("Build Docker Image") {
            steps {
                sh "docker build -t zomato ."
            }
        }
        stage ("Tag & Push to DockerHub") {
            steps {
                script {
                    withDockerRegistry(credentialsId: 'docker') {
                        sh "docker tag zomato ${DOCKER_USER}/zomato:latest "
                        sh "docker push ${DOCKER_USER}/zomato:latest "
                    }
                }
            }
        }
        stage('Docker Scout Image') {
            steps {
                script{
                   withDockerRegistry(credentialsId: 'docker', toolName: 'docker'){
                       sh 'docker-scout quickview kastrov/zomato:latest'
                       sh 'docker-scout cves kastrov/zomato:latest'
                       sh 'docker-scout recommendations kastrov/zomato:latest'
                   }
                }
            }
        }
        stage ("Deploy to Container") {
            steps {
                sh 'docker run -d --name zomato -p 3000:3000 kastrov/zomato:latest'
            }
        }
    }
    post {
    always {
        emailext attachLog: true,
            subject: "'${currentBuild.result}'",
            body: """
                <html>
                <body>
                    <div style="background-color: #FFA07A; padding: 10px; margin-bottom: 10px;">
                        <p style="color: white; font-weight: bold;">Project: ${env.JOB_NAME}</p>
                    </div>
                    <div style="background-color: #90EE90; padding: 10px; margin-bottom: 10px;">
                        <p style="color: white; font-weight: bold;">Build Number: ${env.BUILD_NUMBER}</p>
                    </div>
                    <div style="background-color: #87CEEB; padding: 10px; margin-bottom: 10px;">
                        <p style="color: white; font-weight: bold;">URL: ${env.BUILD_URL}</p>
                    </div>
                </body>
                </html>
            """,
            to: 'ssaifurrahman21@gmail.com',
            mimeType: 'text/html',
            attachmentsPattern: 'trivy.txt'
        }
    }
}
