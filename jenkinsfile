pipeline {
    agent {
        label 'habib-node'
    }


    tools {
        maven 'Maven3'
        jdk 'Java17'
        nodejs 'node23'
    }


    environment {
        //tools environments
        SONAR_HOME = tool "Sonar"
        //github environments
        GIT_REPO = 'https://github.com/SirSaifUrRahman/Zomato-Devops-Project'
        //dockerhub environments
        DOCKER_USER = "saif764"
        DOCKERHUB_LABEL = "dockerhub-cred"
        //jenkins environments
        JENKINS_API_TOKEN = credentials("JENKINS_API_TOKEN")
        BUILD_NUM_OF_CI = "${env.BUILD_NUMBER}"
    }

     parameters {
        string(name: 'BRANCH_NAME', defaultValue: 'master', description: 'Git branch to build')
        //booleanParam(name: 'RUN_TESTS', defaultValue: true, description: 'Run tests after building the project')
    }


    stages {
        stage ("Clean Workspace") {
            steps {
                cleanWs()
            }
        }
        stage ("Git Checkout") {
            steps {

                echo "Cloning ${GIT_REPO} branch: ${params.BRANCH_NAME}"
                git branch: "${params.BRANCH_NAME}", url: "${GIT_REPO}", credentialsId: 'github'
                sh "echo Printing Build Number of CI Job"
                sh "echo Build Number of CI Job is: ${BUILD_NUM_OF_CI}"
            }
        }
        stage("Sonarqube Analysis"){
            steps{
                withSonarQubeEnv('Sonar') {
                    sh '''
                        $SONAR_HOME/bin/sonar-scanner \
                            -Dsonar.projectKey=zomato \
                            -Dsonar.projectName=zomato \
                            -Dsonar.projectVersion=1.0
                    '''
                }        
            }
        }
        stage("Code Quality Gate"){
           steps {
                script {
                    waitForQualityGate abortPipeline: false, credentialsId: 'sonar-token' 
                }
            } 
        }
        // stage("Install NPM Dependencies") {
        //     steps {
        //         sh "npm install"
        //     }
        // }
        // stage('OWASP FS SCAN') {
        //     steps {
        //         dependencyCheck additionalArguments: '--scan ./ --disableYarnAudit --disableNodeAudit -n', odcInstallation: 'DP-Check'
        //         dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
        //     }
        // }
        stage ("Trivy File Scan") {
            steps {
                sh "trivy fs . > trivy.txt"
            }
        }
        stage("Build & Push to DockerHub") {
            steps {
                script {
                    // Securely inject DockerHub credentials (username/password)
                    withCredentials([usernamePassword(
                        credentialsId: "${DOCKERHUB_LABEL}", // Update this ID
                        usernameVariable: "DOCKER_USER",
                        passwordVariable: "DOCKER_PASS"
                    )]) {
                        def imageNameWithTag = "${DOCKER_USER}/zomato:latest"

                        // Build Docker image
                        def dockerImage = docker.build(imageNameWithTag)

                        // Push using Docker registry with credentials
                        docker.withRegistry('https://index.docker.io/v1/', "${DOCKERHUB_LABEL}") {
                           // dockerImage.push("${IMAGE_TAG}")   // Push versioned tag
                            dockerImage.push("latest")         // Push latest tag
                        }

                        echo "Docker image ${imageNameWithTag} built and pushed successfully."
                    }
                }
            }
        }

        // stage('Docker Scout Image') {
        //     steps {
        //         script {
        //             sh "docker scout quickview ${DOCKER_USER}/zomato:latest"
        //             sh "docker scout cves ${DOCKER_USER}/zomato:latest"
        //             sh "docker scout recommendations ${DOCKER_USER}/zomato:latest"
        //         }
        //     }
        // }

        stage('Run Docker Container Script') {
            steps {
                sh 'chmod +x run_container.sh && ./run_container.sh'
            }
        }
    }

    
    post {
    always {
        emailext(
            attachLog: true,
            subject: "Build Notification: ${currentBuild.result}",
            body: """
                <html>
                <head>
                    <style>
                        body {
                            font-family: Arial, sans-serif;
                            background-color: #f4f4f4;
                            margin: 0;
                            padding: 0;
                        }
                        .container {
                            width: 90%;
                            max-width: 600px;
                            margin: 30px auto;
                            background-color: #ffffff;
                            border-radius: 8px;
                            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
                            padding: 20px;
                        }
                        .header {
                            background-color: #007BFF;
                            color: white;
                            padding: 15px;
                            border-radius: 8px 8px 0 0;
                            font-size: 18px;
                            font-weight: bold;
                            text-align: center;
                        }
                        .section {
                            padding: 15px;
                            margin-bottom: 10px;
                            border-bottom: 1px solid #e0e0e0;
                        }
                        .label {
                            font-weight: bold;
                            color: #333;
                        }
                        .value {
                            margin-left: 5px;
                            color: #555;
                        }
                        .footer {
                            text-align: center;
                            padding: 10px;
                            font-size: 12px;
                            color: #aaa;
                        }
                        a.button {
                            display: inline-block;
                            margin-top: 10px;
                            padding: 10px 20px;
                            background-color: #28a745;
                            color: white;
                            text-decoration: none;
                            border-radius: 4px;
                            font-weight: bold;
                        }
                        a.button:hover {
                            background-color: #218838;
                        }
                    </style>
                </head>
                <body>
                    <div class="container">
                        <div class="header">Jenkins Build Status: ${currentBuild.result}</div>

                        <div class="section">
                            <span class="label">Project:</span><span class="value">${env.JOB_NAME}</span>
                        </div>
                        <div class="section">
                            <span class="label">Build Number:</span><span class="value">${env.BUILD_NUMBER}</span>
                        </div>
                        <div class="section">
                            <span class="label">Build URL:</span>
                            <a class="button" href="${env.BUILD_URL}" target="_blank">View Build</a>
                        </div>

                        <div class="footer">
                            Jenkins CI Notification Â· ${new Date().format("yyyy-MM-dd HH:mm")}
                        </div>
                    </div>
                </body>
                </html>
            """,
            to: 'ssaifurrahman21@gmail.com',
            mimeType: 'text/html',
            attachmentsPattern: 'trivy.txt'
        )
        }
    }
}
